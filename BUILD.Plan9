TL;DR:

% prepns	# to set up the namespace (for compiling and running)
% mk		# to build everything
% cd netsurf	# pop to the browser sub-dir
% run		# try the browser


DEPENDENCIES

Netsurf has different dependencies. One of them is 'libcurl' that
is used to fetch pages from the web. At the moment libcurl is not
compiled in, and the flag WITH_CURL is not set. Fetching pages over
http is not neccesary to start with. I have managed to build libcurl
from 'ports' (https://code.9front.org/hg/ports) but only on the
386 architecture.

-------------
NB! The current version of the browser does not yet use any
of the external dependencies, which means that you don't have
to to the following to make the current version work as intended
right now... But for the future!
-------------

The curl-port in ports have its own dependencies:

/$objtype/lib/ape/libgnu.a	(required by libcurl)
/$objtype/lib/ape/libcurl.a	(the curl library)
/bin/gawk			(required by  libcurl)

Here follows instructions on howto install the above libraries
on to your (386) system. But as said, this is not completely
necessary to compile the browser:

1) Install /sys/ports,  if not installed on your system

% cd /sys
% webfs
% hg clone https://code.9front.org/hg/ports
(creates /sys/ports)

2) Install libgnu (required by libcurl):

% cd /sys/ports/ape-libs/libgnu
% mk fetch; mk build; mk install

3) Install gawk (required by libcurl):

% cd /sys/ports/app-textproc/gawk
% mk fetch; mk build; mk install

4) Install libcurl:

% cd /sys/ports/net-misc/curl
% mk fetch; mk build; mk install

LIBEXPAT
--------
The netsurf seem to use the XML library 'expat'. So you
might want to install it on your system as well. However,
it looks like supplying the include files ('expat.h' and
expat_external.h) is enough to get the compile going, so
to make less dependencies, I copied over them to the
directory 'posix/include' directory in netsurf source tree.
TIP: I have succeded to build expat from Lufias port:
https://github.com/lufia/libexpat/tree/plan9/expat
[TODO: figure out what actually happens]



HOW TO BUILD ALL OF NETSURF (longer description)

There are Plan 9 mkfile's in the the 'src' directories
of all support libraries, as well as in browser directory.
There is also an umbrella mkfile in the top directory
(where this file you are reading is) that can be used
to build all support libraries at once, and then the
browser itself, just my issuing a 'mk'.

(from the base directory, as any user)

1. prepns (makes modest changes to the namespace)
2. mk (builds libraries, including the Plan 9 framebuffer,
as well as test programs for the framebuffer, and browser.
The executable file is 'netsurf/$O.nsfb' (e.g. 8.nsfb)

[It is also possible to only build the libraries ('mk libs')
from the base directory, or only building the browser from
the 'netsurf' directory.]


HOW TO CLEAN (remove object files and libraries)

% mk clean

('mk clean' works in all directories with 'mkfiles'.
'mk clean' in the base directory cleans all sub
directories, recursively.

NB! Both the building and cleaning only works on
the set $objtype. To build/clean for multiple
architectures, reapeat with different $objtype.


---------------------------------------------------
DIRECTORY WALK-THROUGH
---------------------------------------------------
libXXX-X.Y.Z/
Support libraries, that are more or less parts of Netsurf,
with version numbers.

import/
Preprocessed files from a Linux build, in order to
have less dependencies on tools, or avoid tools not
easily available on Plan 9.

orig-tars/
All the origianl tar.gz archives as downloaded from
[https://www.netsurf-browser.org]. Also some description
on how symlinks where eliminated, and how they came
into my directory structure.

posix/
Extra posix functions not in APE (The Ansi/Posix Environment)
Also some other files, that needed to go somewhere.

netsurf/9html/
Contains some test html-pages to try out.

netsurf/frontends/framebuffer/res/
Run-time resources (files that the browser wants to open
when it is run. Will probably have to be installed
somewhere later (i.e. /sys/lib/netsurf or so).
For now, the path is hardcoded in the 'makefile' of
netsurf.

The Plan9 framebuffer driver is found in the file
'libnsfb-X.Y.Z/src/surface/plan9.c', and its tests
are found in 'libnsfb-X.Y.Z/test'.

Generally, 'mkfiles' and README.Plan9 files are found
in 'src' diretories under each library. There are fewer
'mkfile' than the original Makefile (the later files are
not used to build under Plan 9).

All changed files 'xxxx' are backuped up as 'orig_xxxx'
before changes were made. You can use diff(1) to see
the changes.

---------------------------------------------------
MORE ABOUT THE BUILD SYSTEM (For further development)
---------------------------------------------------

Possible to use from ports:

libcurl (not yet used - but required)
libexpat
libjpegw

Note that the mkfile's are kept simple and don't fully
represent all possible dependencies between files,
especially regarding header files and between libraries.
If you update a file in a library, you are expected to
rebuild at least that library before rebuilding the browser.

The Gmake makefiles (Makefile) are not used in the
build process on Plan 9. Nor are test-suits included
in the build at this time. Generally, all files contained
int the original source are kept, even if they are not
used to build the browser on Plan 9.

Some files (e.g. XXX.inc and YYY.inc) are in the original
generated by perl scripts during the build process.
To avoid a depency on perl, these are copied in their
generated form, and have to be manually updated if needed.
The same goes for some gen_* files that are the output of
flex/bison, that was not compatible with lex/yacc. 

--------
The source have a number of conditional 'WITH_*' controlling
the inclusion of sertain, non mandatory, components. These are
the WITH_ references I found in the source:

WITH_CURL
WITH_NSLOG
WITH_PDF_EXPORT
WITH_THEME_INSTALL
WITH_NSPSL
WITH_AMISSL
WITH_NSPSL
WITH_BMP
WITH_GIF
WITH_BMP
WITH_JPEG
WITH_PNG
WITH_NSSPRITE
WITH_NS_SVG
WITH_RSVG
WITH_WEBP
WITH_CURL
WITH_NSPSL
WITH_AMISSL
WITH_NSPSL

The source also checks if the system it is compiled in have
certain feautures present, using 'HAVE_*' definitions. The
following HAVE-definitions might be interesting for the port:

HAVE_INETATON
HAVE_INETPTON
HAVE_MMAP
HAVE_REALPATH
HAVE_SCANDIR
HAVE_SIGPIPE
HAVE_STRCASESTR
HAVE_STRCHRNUL
HAVE_STRFTIME
HAVE_STRNDUP
HAVE_STRPTIME
HAVE_UTSNAME
HAVE_VA_COPY
HAVE___VA_COPY
HAVE_INTPTR_T
